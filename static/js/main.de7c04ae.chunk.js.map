{"version":3,"sources":["ToDoList.js","contect.js","Menu.js","App.js","serviceWorker.js","index.js"],"names":["List","props","useState","line","ch","dis","disp","key","index","style","textDecoration","value","className","display","id","onClick","ToDoList","task","updateTask","arr","updateArr","type","placeholder","onChange","e","target","Button","prev","map","Images","src","alt","Contect","name","setname","Menu","activeClassName","to","App","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8WA+CA,SAASA,EAAKC,GAAO,IAAD,EACJC,oBAAS,GADL,mBACbC,EADa,KACRC,EADQ,OAEHF,oBAAS,GAFN,mBAEbG,EAFa,KAETC,EAFS,KASlB,OACG,oCACM,wBAAIC,IAAKN,EAAMO,MAAOC,MAAO,CAACC,eAAeP,EAAO,eAAe,SAClEF,EAAMO,MAAM,EADb,KACkBP,EAAMU,MADxB,IAC+B,kBAAC,IAAD,CAAYC,UAAU,MAAMH,MAAO,CAACI,QAAQR,EAAM,eAAe,QAASS,GAAIb,EAAMO,MAAOO,QAR1H,WACLX,GAAG,GACHE,GAAK,QAaQU,MAzDnB,WAAoB,IAAD,EACId,qBADJ,mBACbe,EADa,KACRC,EADQ,OAEEhB,mBAAS,IAFX,mBAEbiB,EAFa,KAETC,EAFS,KAejB,OACE,oCACA,yBAAKR,UAAU,QACf,yBAAKA,UAAU,QACb,sDACA,2BAAOS,KAAK,OAAOC,YAAY,kBAAkBC,SAjBrD,SAAgBC,GACfN,EAAWM,EAAEC,OAAOd,QAgBkDA,MAAOM,IAC1E,kBAACS,EAAA,EAAD,CAAQd,UAAU,MAAMG,QAd5B,WACGK,GAAU,SAACO,GACT,MAAM,GAAN,mBACIA,GADJ,CACSV,OAGXC,EAAW,MASR,kBAAC,IAAD,CAASN,UAAU,UAErB,4BAEGO,EAAIS,KAAI,SAACjB,EAAMH,GACf,OAAO,kBAACR,EAAD,CAAMQ,MAAOA,EAAOG,MAAOA,Y,aCZ3C,SAASkB,EAAO5B,GAChB,OACI,oCACA,yBAAKW,UAAU,SACP,yBAAKkB,IAAK7B,EAAM6B,IAAKC,IAAI,aAKtBC,MA9Bf,WAAmB,IAAD,EACM9B,mBAAS,IADf,mBACR+B,EADQ,KACHC,EADG,KAEPJ,EAAI,wCAAD,OAAyCG,GAKnD,OACI,oCACA,yBAAKrB,UAAU,UAEf,yBAAKA,UAAU,SACX,2BAAOS,KAAK,OAAOC,YAAY,iBAAiBX,MAAOsB,EAAMV,SATrD,SAACC,GACb,IAAIH,EAAKG,EAAEC,OAAOd,MAClBuB,EAAQb,OASA,KAAPY,EAAU,KAAK,kBAACJ,EAAD,CAAQC,IAAKA,O,gBCEtBK,MAff,WAEI,OACI,oCACA,yBAAKvB,UAAU,UACX,4BACI,kBAAC,IAAD,CAASwB,gBAAgB,OAAOxB,UAAU,KAAMyB,GAAG,KAAnD,aACA,kBAAC,IAAD,CAASD,gBAAgB,OAAOxB,UAAU,KAAMyB,GAAG,YAAnD,cCiBGC,MAnBnB,WAEE,OACE,oCACA,kBAAC,EAAD,MACA,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQzB,IAC9B,kBAAC,IAAD,CAAOwB,KAAK,WAAWE,UAAWV,OCJlBW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASP,OACP,kBAAC,IAAD,KACA,kBAAC,EAAD,OAEAQ,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.de7c04ae.chunk.js","sourcesContent":["import React, {useState } from 'react';\r\nimport './ToDoList.css';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n    \r\n\r\n\r\n\r\nfunction ToDoList(){\r\n  let[task,updateTask]=useState()\r\n  let[arr,updateArr]=useState([])\r\n  function change(e){\r\n   updateTask(e.target.value)\r\n  }\r\n \r\n  function mkarr(){\r\n     updateArr((prev)=>{\r\n       return(\r\n       [...prev,task]\r\n       )\r\n     })\r\n     updateTask('')\r\n  }\r\n  return(\r\n    <>\r\n    <div className=\"root\">\r\n    <div className=\"main\">\r\n      <h1>ToDo List üìù</h1>\r\n      <input type=\"text\" placeholder=\"write your task\" onChange={change} value={task}/>\r\n      <Button className=\"btn\" onClick={mkarr}>\r\n        <AddIcon className=\"plus\"></AddIcon>\r\n      </Button>\r\n      <ul>\r\n       {\r\n         arr.map((value,index)=>{\r\n         return <List index={index} value={value} />\r\n         })\r\n       }\r\n     </ul>\r\n    </div>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n  \r\n\r\nfunction List(props){\r\n  let [line,ch]=useState(false)\r\n  let [dis,disp]=useState(true)\r\n  \r\n    let cl=()=>{\r\n      ch(true)\r\n      disp(false)\r\n    }\r\n   \r\n  return(\r\n     <>\r\n           <li key={props.index} style={{textDecoration:line ? 'line-through':'none'}}>\r\n           {props.index+1}. {props.value} <DeleteIcon className=\"del\" style={{display:dis ? 'inline-block':'none'}} id={props.index} onClick={cl} /></li>\r\n       \r\n      \r\n     </>\r\n   )\r\n      }\r\n\r\n    export default ToDoList;\r\n","import React, { useState } from 'react';\r\nimport './contect.css';\r\n\r\nfunction Contect(){\r\n    const[name,setname]=useState('')\r\n       let src=`https://source.unsplash.com/600x400/?${name}`\r\n    const imageName=(e)=>{\r\n        let type=e.target.value\r\n        setname(type)\r\n    }\r\n    return(\r\n        <>\r\n        <div className=\"images\">\r\n\r\n        <div className='input'>\r\n            <input type='text' placeholder=\"enter any name\" value={name} onChange={imageName}/>\r\n        </div>\r\n        {name===''?null:<Images src={src}/>}\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nfunction Images(props){\r\nreturn(\r\n    <>\r\n    <div className=\"image\"> \r\n            <img src={props.src} alt='no-img'></img>\r\n        </div>\r\n        </>\r\n)\r\n}\r\nexport default Contect;","import React from 'react'\r\nimport './Menu.css'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nfunction Menu(){\r\n   \r\n    return(\r\n        <>\r\n        <div className='navbar'>\r\n            <ul>\r\n                <NavLink activeClassName=\"list\" className=\"li\"  to=\"/\">ToDo List</NavLink>\r\n                <NavLink activeClassName=\"list\" className=\"li\"  to=\"/contect\">Search\r\n                </NavLink>\r\n            </ul>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Menu ;","import React from 'react';\nimport './App.css';\nimport ToDoList from \"./ToDoList.js\"\nimport { Route, Switch } from \"react-router-dom\"  \nimport Contect from './contect.js';\nimport Menu from './Menu';\n\n\n\nfunction App(){\n  \n  return(\n    <>\n    <Menu/>\n    <Switch>\n    <Route exact path=\"/\" render={ToDoList}/>\n    <Route path=\"/contect\" component={Contect}/>\n  \n    \n    </Switch>\n   \n    </>\n  )\n}\n  \n\n\n\n    export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter} from 'react-router-dom'\n\n\n\nReactDOM.render(\n  <BrowserRouter>\n  <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}